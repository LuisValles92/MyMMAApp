/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package misformularios;

import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author Luis
 */
public class frmInsercion2 extends javax.swing.JFrame {

    /**
     * Creates new form frmInsercion2
     */
    Connection con;
    PreparedStatement pstmt;
    Statement st;
    ResultSet rs;

    private DefaultListModel modelo1 = new DefaultListModel();
    private DefaultListModel modelo2 = new DefaultListModel();
    private DefaultListModel modelo3 = new DefaultListModel();
    private DefaultListModel modelo4 = new DefaultListModel();
    private DefaultListModel modelo5 = new DefaultListModel();
    private DefaultListModel modelo6 = new DefaultListModel();

    public frmInsercion2() {
        initComponents();

        setTitle("Área de inserción 2");
        setSize(1170, 850);
        setLocation(45, 130);

        //CREAR EVENTO
        ImageIcon imagen24 = new ImageIcon(getClass().getResource("/misimagenes/promotoresevento.png"));
        ImageIcon icono24 = new ImageIcon(imagen24.getImage().getScaledInstance(jlPromotores.getWidth(), jlPromotores.getHeight(), Image.SCALE_DEFAULT));
        jlPromotores.setIcon(icono24);
        tfNombreEve.requestFocus();

        ((JLabel) cbPromocionEve.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);

        //CREAR COMBATE
        rbMasCom.setSelected(true);
        ((JLabel) cbCatCom.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        jlLucRojoCom.setModel(modelo1);
        jlArbCom.setModel(modelo2);
        jlLucAzulCom.setModel(modelo3);
        modelo1.removeAllElements();
        modelo2.removeAllElements();
        modelo3.removeAllElements();
        btnMarcarCom.setEnabled(false);
        btnMarcarDosCom.setEnabled(false);
        jlCinCom.setModel(modelo4);
        jlLucVenCom.setModel(modelo5);
        jlEveCom.setModel(modelo6);
        modelo4.removeAllElements();
        modelo5.removeAllElements();
        modelo6.removeAllElements();
        ((JLabel) cbMetodoCom.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        cbMetodoCom.setEnabled(false);
        sRonCom.setEnabled(false);
        sTieMinCom.setEnabled(false);
        sTieSegCom.setEnabled(false);
        btnInsCom.setEnabled(false);

        //CENTRAR LOS ITEM DE LOS JLIST
        DefaultListCellRenderer renderer1 = (DefaultListCellRenderer) jlLucRojoCom.getCellRenderer();
        renderer1.setHorizontalAlignment(SwingConstants.CENTER);
        DefaultListCellRenderer renderer2 = (DefaultListCellRenderer) jlArbCom.getCellRenderer();
        renderer2.setHorizontalAlignment(SwingConstants.CENTER);
        DefaultListCellRenderer renderer3 = (DefaultListCellRenderer) jlLucAzulCom.getCellRenderer();
        renderer3.setHorizontalAlignment(SwingConstants.CENTER);
        DefaultListCellRenderer renderer4 = (DefaultListCellRenderer) jlCinCom.getCellRenderer();
        renderer4.setHorizontalAlignment(SwingConstants.CENTER);
        DefaultListCellRenderer renderer5 = (DefaultListCellRenderer) jlEveCom.getCellRenderer();
        renderer5.setHorizontalAlignment(SwingConstants.CENTER);
        DefaultListCellRenderer renderer6 = (DefaultListCellRenderer) jlLucVenCom.getCellRenderer();
        renderer6.setHorizontalAlignment(SwingConstants.CENTER);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel2 = new javax.swing.JLabel();
        tfNombreEve = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbPromocionEve = new javax.swing.JComboBox<>();
        dcFechaEve = new com.toedter.calendar.JDateChooser();
        tfSedeEve = new javax.swing.JTextField();
        tfCiudadEve = new javax.swing.JTextField();
        sAsistenciaEve = new javax.swing.JSpinner();
        sRecaudacionEve = new javax.swing.JSpinner();
        btnInsertarEve = new javax.swing.JButton();
        btnLimpiarEve = new javax.swing.JButton();
        jlPromotores = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jPanel2 = new javax.swing.JPanel();
        rbMasCom = new javax.swing.JRadioButton();
        rbFemCom = new javax.swing.JRadioButton();
        cbCatCom = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        btnBuscarCom = new javax.swing.JButton();
        btnLimpiarCom = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlArbCom = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlLucAzulCom = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jlLucRojoCom = new javax.swing.JList<>();
        btnMarcarCom = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlLucVenCom = new javax.swing.JList<>();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jlEveCom = new javax.swing.JList<>();
        jLabel15 = new javax.swing.JLabel();
        btnMarcarDosCom = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jlCinCom = new javax.swing.JList<>();
        jLabel16 = new javax.swing.JLabel();
        cbMetodoCom = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        sRonCom = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        sTieMinCom = new javax.swing.JSpinner();
        jLabel20 = new javax.swing.JLabel();
        sTieSegCom = new javax.swing.JSpinner();
        btnInsCom = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("AR JULIAN", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ÁREA DE INSERCIÓN 2");
        jLabel1.setAlignmentY(0.0F);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 50, -1, -1));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDesktopPane1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("NOMBRE:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("FECHA:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("PROMOCIÓN:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("RECAUDACIÓN:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("SEDE:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("ASISTENCIA:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("CIUDAD:");

        cbPromocionEve.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<SELECCIONAR>", "ULTIMATE FIGHTING CHAMPIONSHIP", "BELLATOR MMA", "ONE CHAMPIONSHIP", "CAGE WARRIORS", "COMBATE AMERICAS MMA" }));

        dcFechaEve.setDateFormatString("yyyy-MM-dd");

        tfSedeEve.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfSedeEveKeyTyped(evt);
            }
        });

        tfCiudadEve.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfCiudadEveKeyTyped(evt);
            }
        });

        btnInsertarEve.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnInsertarEve.setText("INSERTAR EVENTO");
        btnInsertarEve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarEveActionPerformed(evt);
            }
        });

        btnLimpiarEve.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLimpiarEve.setText("LIMPIAR EVENTO");
        btnLimpiarEve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarEveActionPerformed(evt);
            }
        });

        jlPromotores.setText("jlPromotores");
        jlPromotores.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(tfNombreEve, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(cbPromocionEve, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(dcFechaEve, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(tfSedeEve, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(tfCiudadEve, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(sAsistenciaEve, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(sRecaudacionEve, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(btnInsertarEve, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(btnLimpiarEve, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jlPromotores, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlPromotores, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dcFechaEve, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sAsistenciaEve, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(sRecaudacionEve, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfNombreEve, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cbPromocionEve, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfSedeEve, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfCiudadEve, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(113, 113, 113)
                                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnInsertarEve, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnLimpiarEve, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(132, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(btnInsertarEve, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(btnLimpiarEve, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfNombreEve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cbPromocionEve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(dcFechaEve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfSedeEve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(tfCiudadEve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(sAsistenciaEve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(sRecaudacionEve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(jlPromotores, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );

        jPanel1.add(jDesktopPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 630));

        jTabbedPane1.addTab("INSERTAR EVENTO", jPanel1);

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDesktopPane2.setBackground(new java.awt.Color(0, 204, 153));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "SEXO", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup1.add(rbMasCom);
        rbMasCom.setText("MASCULINO");
        rbMasCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMasComActionPerformed(evt);
            }
        });
        jPanel2.add(rbMasCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        buttonGroup1.add(rbFemCom);
        rbFemCom.setText("FEMENINO");
        rbFemCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbFemComActionPerformed(evt);
            }
        });
        jPanel2.add(rbFemCom, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, -1, -1));

        cbCatCom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<SELECCIONAR>", "PESO MOSCA", "PESO GALLO", "PESO PLUMA", "PESO LIGERO", "PESO WELTER", "PESO MEDIO", "PESO SEMICOMPLETO", "PESO PESADO" }));

        jLabel9.setText("CATEGORÍA:");

        btnBuscarCom.setText("BUSCAR");
        btnBuscarCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarComActionPerformed(evt);
            }
        });

        btnLimpiarCom.setText("LIMPIAR");
        btnLimpiarCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarComActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Seleccionar Luchador/ra de Guante Rojo");

        jScrollPane3.setViewportView(jlArbCom);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Seleccionar Árbitro/a");

        jScrollPane4.setViewportView(jlLucAzulCom);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Seleccionar Luchador/ra de Guante Azul");

        jScrollPane5.setViewportView(jlLucRojoCom);

        btnMarcarCom.setText("MARCAR");
        btnMarcarCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarcarComActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMarcarCom)
                .addGap(347, 347, 347))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(79, 79, 79)
                .addComponent(jLabel12)
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(jLabel10)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMarcarCom)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("¿Es un combate por el cinturón?");

        jScrollPane2.setViewportView(jlLucVenCom);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Seleccionar Luchador/ra Vencedor/ra");

        jScrollPane6.setViewportView(jlEveCom);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Seleccionar Evento");

        btnMarcarDosCom.setText("MARCAR");
        btnMarcarDosCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarcarDosComActionPerformed(evt);
            }
        });

        jScrollPane7.setViewportView(jlCinCom);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMarcarDosCom)
                .addGap(346, 346, 346))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel13))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15)
                        .addGap(85, 85, 85))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMarcarDosCom)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("MÉTODO DE FINALIZACIÓN:");

        cbMetodoCom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<SELECCIONAR>", "TKO", "SUMISIÓN", "POR PUNTOS" }));
        cbMetodoCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMetodoComActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Nº DE RONDAS:");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("TIEMPO DE COMBATE");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("MINUTOS:");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("SEGUNDOS:");

        btnInsCom.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnInsCom.setText("INSERTAR COMBATE");
        btnInsCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsComActionPerformed(evt);
            }
        });

        jDesktopPane2.setLayer(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(cbCatCom, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(btnBuscarCom, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(btnLimpiarCom, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel16, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(cbMetodoCom, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel17, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(sRonCom, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel18, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel19, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(sTieMinCom, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel20, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(sTieSegCom, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(btnInsCom, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                .addComponent(btnBuscarCom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLimpiarCom))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                            .addComponent(cbCatCom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(370, 370, 370))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jDesktopPane2Layout.createSequentialGroup()
                                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(cbMetodoCom, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sRonCom, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))
                                .addGap(27, 27, 27)
                                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addGap(18, 18, 18)
                                        .addComponent(sTieMinCom, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel20)
                                        .addGap(18, 18, 18)
                                        .addComponent(sTieSegCom, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnInsCom, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(115, 115, 115))))
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCatCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarCom)
                    .addComponent(btnLimpiarCom))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMetodoCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sRonCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)
                            .addComponent(sTieMinCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20)
                            .addComponent(sTieSegCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnInsCom, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jPanel5.add(jDesktopPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 630));

        jTabbedPane1.addTab("INSERTAR COMBATE", jPanel5);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, 1030, 650));

        btnAtras.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAtras.setText("ATRÁS");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });
        getContentPane().add(btnAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 150, 87));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarEveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarEveActionPerformed
        // TODO add your handling code here:
        boolean flag_asistencianegativo = false, flag_recaudacionnegativo = false;

        if (Integer.valueOf(sAsistenciaEve.getValue().toString()) < 0) {
            flag_asistencianegativo = true;
        } else {
            flag_asistencianegativo = false;
        }

        if (Integer.valueOf(sRecaudacionEve.getValue().toString()) < 0) {
            flag_recaudacionnegativo = true;
        } else {
            flag_recaudacionnegativo = false;
        }

        if (tfNombreEve.getText().isEmpty() || cbPromocionEve.getSelectedIndex() == 0 || dcFechaEve.getDate() == null
                || tfSedeEve.getText().isEmpty() || tfCiudadEve.getText().isEmpty() || "0".equals(sAsistenciaEve.getValue().toString()) || "0".equals(sRecaudacionEve.getValue().toString())
                || flag_asistencianegativo == true || flag_recaudacionnegativo == true) {
            if (tfNombreEve.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "El campo 'NOMBRE' está vacío");
            }
            if (cbPromocionEve.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Error en el campo 'PROMOCIÓN': Seleccione un promotor");
            }
            if (dcFechaEve.getDate() == null) {
                JOptionPane.showMessageDialog(null, "El campo 'FECHA' está vacío o marque una fecha válida");
            }
            if (tfSedeEve.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "El campo 'SEDE' está vacío");
            }
            if (tfCiudadEve.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "El campo 'CIUDAD' está vacío");
            }
            if ("0".equals(sAsistenciaEve.getValue().toString())) {
                JOptionPane.showMessageDialog(null, "El campo 'ASISTENCIA' está a cero");
            }
            if (flag_asistencianegativo == true) {
                JOptionPane.showMessageDialog(null, "El campo 'ASISTENCIA' está en negativo");
            }
            if ("0".equals(sRecaudacionEve.getValue().toString())) {
                JOptionPane.showMessageDialog(null, "El campo 'RECAUDACIÓN' está a cero");
            }
            if (flag_recaudacionnegativo == true) {
                JOptionPane.showMessageDialog(null, "El campo 'RECAUDACIÓN' está en negativo");
            }
        } else {

            try {
                String formato = dcFechaEve.getDateFormatString();
                Date date = dcFechaEve.getDate();
                SimpleDateFormat sdf = new SimpleDateFormat(formato);
                String fnacim = String.valueOf(sdf.format(date));
                Date fechautildate = sdf.parse(fnacim);
                java.sql.Date fechasqldate = new java.sql.Date(fechautildate.getYear(), fechautildate.getMonth(), fechautildate.getDate());

                String url = "jdbc:mysql://localhost:3306/mymma";
                String userName = "root";
                String password = "";
                Class.forName("com.mysql.cj.jdbc.Driver");
                con = DriverManager.getConnection(url, userName, password);

                String sql = "INSERT INTO evento (nombreEve, promocionEve, fechaEve, "
                        + "sedeEve, ciudadEve, asistenciaEve, recaudacionEve) "
                        + "VALUES (?,?,?,?,?,?,?)";
                pstmt = con.prepareStatement(sql);

                pstmt.setString(1, tfNombreEve.getText().toUpperCase());
                pstmt.setString(2, cbPromocionEve.getSelectedItem().toString());
                pstmt.setDate(3, fechasqldate);
                pstmt.setString(4, tfSedeEve.getText().toUpperCase());
                pstmt.setString(5, tfCiudadEve.getText().toUpperCase());
                pstmt.setInt(6, Integer.valueOf(sAsistenciaEve.getValue().toString()));
                pstmt.setInt(7, Integer.valueOf(sRecaudacionEve.getValue().toString()));

                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(null, "EVENTO INSERTADO CORRECTAMENTE");
                pstmt.close();
                con.close();
                btnInsertarEve.setEnabled(false);

                tfNombreEve.setEnabled(false);
                cbPromocionEve.setEnabled(false);
                dcFechaEve.setEnabled(false);
                tfSedeEve.setEnabled(false);
                tfCiudadEve.setEnabled(false);
                sAsistenciaEve.setEnabled(false);
                sRecaudacionEve.setEnabled(false);

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en conexión: SQLException " + ex);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Error en conexión: ClassNotFoundException");
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Error: ParseException");
            }

        }
    }//GEN-LAST:event_btnInsertarEveActionPerformed

    private void btnLimpiarEveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarEveActionPerformed
        // TODO add your handling code here:
        btnInsertarEve.setEnabled(true);
        tfNombreEve.requestFocus();
        tfNombreEve.setText("");
        cbPromocionEve.setSelectedIndex(0);
        dcFechaEve.setDate(null);
        tfSedeEve.setText("");
        tfCiudadEve.setText("");
        sAsistenciaEve.setValue(0);
        sRecaudacionEve.setValue(0);

        tfNombreEve.setEnabled(true);
        cbPromocionEve.setEnabled(true);
        dcFechaEve.setEnabled(true);
        tfSedeEve.setEnabled(true);
        tfCiudadEve.setEnabled(true);
        sAsistenciaEve.setEnabled(true);
        sRecaudacionEve.setEnabled(true);
    }//GEN-LAST:event_btnLimpiarEveActionPerformed

    private void tfSedeEveKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSedeEveKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if (car != ' ' && car < 'A' || car > 'Z' && car < 'a' || car > 'z' && car != 'ñ' && car != 'Ñ') {
            evt.consume();
        }
    }//GEN-LAST:event_tfSedeEveKeyTyped

    private void tfCiudadEveKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfCiudadEveKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if (car != ' ' && car != ',' && car < 'A' || car > 'Z' && car < 'a' || car > 'z' && car != 'ñ' && car != 'Ñ') {
            evt.consume();
        }
    }//GEN-LAST:event_tfCiudadEveKeyTyped

    private void rbMasComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMasComActionPerformed
        // TODO add your handling code here:
        cbCatCom.removeAllItems();
        cbCatCom.addItem("<SELECCIONAR>");
        cbCatCom.addItem("PESO MOSCA");
        cbCatCom.addItem("PESO GALLO");
        cbCatCom.addItem("PESO PLUMA");
        cbCatCom.addItem("PESO LIGERO");
        cbCatCom.addItem("PESO WELTER");
        cbCatCom.addItem("PESO MEDIO");
        cbCatCom.addItem("PESO SEMICOMPLETO");
        cbCatCom.addItem("PESO PESADO");
    }//GEN-LAST:event_rbMasComActionPerformed

    private void rbFemComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbFemComActionPerformed
        // TODO add your handling code here:
        cbCatCom.removeAllItems();
        cbCatCom.addItem("<SELECCIONAR>");
        cbCatCom.addItem("PESO PAJA");
        cbCatCom.addItem("PESO MOSCA");
        cbCatCom.addItem("PESO GALLO");
        cbCatCom.addItem("PESO PLUMA");
    }//GEN-LAST:event_rbFemComActionPerformed

    private void btnBuscarComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarComActionPerformed
        // TODO add your handling code here:
        if (cbCatCom.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Error en el campo 'CATEGORÍA': Seleccione una categoría");
        } else {
            rbMasCom.setEnabled(false);
            rbFemCom.setEnabled(false);
            cbCatCom.setEnabled(false);
            btnBuscarCom.setEnabled(false);

            String sexo = "";
            if (rbMasCom.isSelected()) {
                sexo = "MASCULINO";
            } else if (rbFemCom.isSelected()) {
                sexo = "FEMENINO";
            }

            try {
                String url = "jdbc:mysql://localhost:3306/mymma";
                String userName = "root";
                String password = "";
                Class.forName("com.mysql.cj.jdbc.Driver");
                con = DriverManager.getConnection(url, userName, password);

                String sql = "SELECT * FROM luchador "
                        + "WHERE sexoLuc=? AND categoriaLuc=? AND estadoLuc='ACTIVO'";
                pstmt = con.prepareStatement(sql);
                pstmt.setString(1, sexo);
                pstmt.setString(2, cbCatCom.getSelectedItem().toString());
                rs = pstmt.executeQuery();
                while (rs.next() == true) {
                    modelo1.addElement(rs.getString("idLuc") + " " + rs.getString("nombreLuc"));
                    modelo3.addElement(rs.getString("idLuc") + " " + rs.getString("nombreLuc"));
                }
                rs.close();
                pstmt.close();

                st = con.createStatement();
                sql = "SELECT * FROM arbitro "
                        + "WHERE sexoArb='" + sexo + "'";
                rs = st.executeQuery(sql);
                while (rs.next() == true) {
                    modelo2.addElement(rs.getString("idArb") + " " + rs.getString("nombreArb"));
                }
                st.close();
                con.close();
                btnMarcarCom.setEnabled(true);

            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Error en conexión: ClassNotFoundException");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error en conexión: SQLException " + e);
            }

        }


    }//GEN-LAST:event_btnBuscarComActionPerformed

    private void btnMarcarComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarcarComActionPerformed
        // TODO add your handling code here:
        if (jlLucRojoCom.isSelectionEmpty() || jlArbCom.isSelectionEmpty() || jlLucAzulCom.isSelectionEmpty()) {
            if (jlLucRojoCom.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Error: Seleccione el/la Luchador/ra de Guante Rojo");
            }
            if (jlArbCom.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Error: Seleccione el/la Árbitro/a");
            }
            if (jlLucAzulCom.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Error: Seleccione el/la Luchador/ra de Guante Azul");
            }
        } else {
            if (jlLucRojoCom.getSelectedIndex() == jlLucAzulCom.getSelectedIndex()) {
                JOptionPane.showMessageDialog(null, "Error:\nEl luchador de guante rojo no puede ser el mismo que el "
                        + "luchador de guante azul\n/\nLa luchadora de guante rojo no puede ser la misma que la luchadora de guante azul");
            } else {
                /*
                String idRojo = jlLucRojoCom.getSelectedValue().replaceAll("[^\\.0123456789]", "");
                String idRef = jlArbCom.getSelectedValue().replaceAll("[^\\.0123456789]", "");
                String idAzul = jlLucAzulCom.getSelectedValue().replaceAll("[^\\.0123456789]", "");
                 */
                jlLucRojoCom.setEnabled(false);
                jlArbCom.setEnabled(false);
                jlLucAzulCom.setEnabled(false);
                btnMarcarCom.setEnabled(false);
                btnMarcarDosCom.setEnabled(true);
                modelo4.addElement("SÍ");//0
                modelo4.addElement("NO");//1
                //System.out.println(jlCinCom.getSelectedIndex());
                try {
                    String url = "jdbc:mysql://localhost:3306/mymma";
                    String userName = "root";
                    String password = "";
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    con = DriverManager.getConnection(url, userName, password);

                    modelo5.addElement(jlLucRojoCom.getSelectedValue());
                    modelo5.addElement(jlLucAzulCom.getSelectedValue());

                    String sql = "SELECT * FROM evento";
                    pstmt = con.prepareStatement(sql);
                    rs = pstmt.executeQuery();
                    while (rs.next() == true) {
                        modelo6.addElement(rs.getString("idEve") + " " + rs.getString("nombreEve"));
                    }
                    rs.close();
                    pstmt.close();
                    con.close();

                } catch (ClassNotFoundException e) {
                    JOptionPane.showMessageDialog(null, "Error en conexión: ClassNotFoundException");
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Error en conexión: SQLException " + e);
                }
            }
        }


    }//GEN-LAST:event_btnMarcarComActionPerformed

    private void btnMarcarDosComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarcarDosComActionPerformed
        // TODO add your handling code here:
        if (jlCinCom.isSelectionEmpty() || jlLucVenCom.isSelectionEmpty() || jlEveCom.isSelectionEmpty()) {
            if (jlCinCom.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Error: Seleccione si es o no un combate por el cinturón");
            }
            if (jlLucVenCom.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Error: Seleccione el/la Luchador/ra Vencedor/ra del combate");
            }
            if (jlEveCom.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Error: Seleccione el evento al cual pertenece el combate");
            }
        } else {
            int id_lucrojo = Integer.parseInt(jlLucRojoCom.getSelectedValue().replaceAll("[^\\.0123456789]", ""));
            int id_lucazul = Integer.parseInt(jlLucAzulCom.getSelectedValue().replaceAll("[^\\.0123456789]", ""));
            int id_campeon = 0;

            String sexo = "";
            if (rbMasCom.isSelected()) {
                sexo = "MASCULINO";
            } else if (rbFemCom.isSelected()) {
                sexo = "FEMENINO";
            }

            //CON LAS SIGUIENTE LÍNEAS OBTENGO LA ID DE EVENTO
            String str_evento = jlEveCom.getSelectedValue();
            int pos = 0;
            for (int i = 0; i < str_evento.length(); i++) {
                if (str_evento.charAt(i) == ' ') {
                    pos = i;
                    break;
                }
            }
            int id_evento = Integer.parseInt(str_evento.substring(0, pos));

            boolean flag_comp_rojo = false, flag_comp_azul = false;
            int contador_comp_rojo = 0, contador_comp_azul = 0;

            //UN EVENTO SÓLO PODRÁ TENER HASTA 5 COMBATES
            boolean flag_numcomb = false;
            int contador_numcomb = 0;

            try {
                String url = "jdbc:mysql://localhost:3306/mymma";
                String userName = "root";
                String password = "";
                Class.forName("com.mysql.cj.jdbc.Driver");
                con = DriverManager.getConnection(url, userName, password);

                String sql = "SELECT * FROM cinturon "
                        + "WHERE sexoCin=? AND categoriaCin=?";
                pstmt = con.prepareStatement(sql);
                pstmt.setString(1, sexo);
                pstmt.setString(2, cbCatCom.getSelectedItem().toString());
                rs = pstmt.executeQuery();
                while (rs.next() == true) {
                    id_campeon = rs.getInt("idluchadorcampeonCin");
                }
                rs.close();
                pstmt.close();

                //CONSULTAS PARA CERTIFICAR QUE UN LUCHADOR SÓLO PUEDA TENER UN COMBATE DENTRO DE UN MISMO EVENTO
                st = con.createStatement();
                sql = "SELECT * FROM combate "
                        + "WHERE ideventoCom='" + id_evento + "' AND idluchadorrojoCom='" + id_lucrojo + "'";
                rs = st.executeQuery(sql);
                while (rs.next() == true) {
                    contador_comp_rojo++;
                }
                st.close();

                st = con.createStatement();
                sql = "SELECT * FROM combate "
                        + "WHERE ideventoCom='" + id_evento + "' AND idluchadorazulCom='" + id_lucrojo + "'";
                rs = st.executeQuery(sql);
                while (rs.next() == true) {
                    contador_comp_rojo++;
                }
                st.close();

                st = con.createStatement();
                sql = "SELECT * FROM combate "
                        + "WHERE ideventoCom='" + id_evento + "' AND idluchadorrojoCom='" + id_lucazul + "'";
                rs = st.executeQuery(sql);
                while (rs.next() == true) {
                    contador_comp_azul++;
                }
                st.close();

                st = con.createStatement();
                sql = "SELECT * FROM combate "
                        + "WHERE ideventoCom='" + id_evento + "' AND idluchadorazulCom='" + id_lucazul + "'";
                rs = st.executeQuery(sql);
                while (rs.next() == true) {
                    contador_comp_azul++;
                }
                st.close();

                //UN EVENTO SÓLO PODRÁ TENER HASTA 5 COMBATES
                st = con.createStatement();
                sql = "SELECT * FROM combate "
                        + "WHERE ideventoCom='" + id_evento + "'";
                rs = st.executeQuery(sql);
                while (rs.next() == true) {
                    contador_numcomb++;
                }
                st.close();

                con.close();

            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Error en conexión: ClassNotFoundException");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error en conexión: SQLException " + e);
            }

            if (contador_comp_rojo > 0) {
                flag_comp_rojo = true;
            } else if (contador_comp_rojo == 0) {
                flag_comp_rojo = false;
            }
            if (contador_comp_azul > 0) {
                flag_comp_azul = true;
            } else if (contador_comp_azul == 0) {
                flag_comp_azul = false;
            }

            //UN EVENTO SÓLO PODRÁ TENER HASTA 5 COMBATES
            if (contador_numcomb > 4) {
                flag_numcomb = true;
            } else if (contador_numcomb <= 4) {
                flag_numcomb = false;
            }

            //Comprobamos que uno de los dos luchadores del combate sea el actual campeón
            boolean flag_cinturon = false;
            if (jlCinCom.getSelectedIndex() == 0) { //Si es un combate titular
                if (id_campeon != id_lucrojo && id_campeon != id_lucazul) {
                    flag_cinturon = true; //No se puede celebrar el combate si no esta el campeón como luchador rojo o como luchador azul
                } else {
                    flag_cinturon = false;
                }
            } else if (jlCinCom.getSelectedIndex() == 1) { //No es un combate titular
                flag_cinturon = false;
            }

            if (flag_cinturon == true || flag_comp_rojo == true || flag_comp_azul == true || flag_numcomb == true) { //Falta comprobar si el evento ya tiene los 5 combates y por tanto no se puede añadir otro
                if (flag_cinturon == true) {
                    JOptionPane.showMessageDialog(null, "Error en el campo '¿Es un combate por el cinturón?': No se puede celebrar un combate por el cinturón "
                            + "si el campeón de dicho sexo y dicha categoría no se encuentra como luchador/ra de guante rojo o como luchador/ra de guante azul");
                }
                if (flag_comp_rojo == true) {
                    JOptionPane.showMessageDialog(null, "Error: El/La Luchador/ra de Guante Rojo ya tiene un combate para el evento seleccionado"
                            + "\nUn/Una Luchador/ra sólo podrá participar en un combate dentro de un mismo evento"
                            + "\nSeleccione otro evento");
                }
                if (flag_comp_azul == true) {
                    JOptionPane.showMessageDialog(null, "Error: El/La Luchador/ra de Guante Azul ya tiene un combate para el evento seleccionado"
                            + "\nUn/Una Luchador/ra sólo podrá participar en un combate dentro de un mismo evento"
                            + "\nSeleccione otro evento");
                }
                if (flag_numcomb == true) {
                    JOptionPane.showMessageDialog(null, "Error: El evento seleccionado ya tiene la cartelera llena y por tanto no hay combates disponibles"
                            + "\nUn evento sólo podrá tener hasta 5 combates"
                            + "\nSeleccione otro evento");
                }
            } else {
                btnMarcarDosCom.setEnabled(false);
                jlCinCom.setEnabled(false);
                jlLucVenCom.setEnabled(false);
                jlEveCom.setEnabled(false);
                //Y se activan los demás campos finales
                cbMetodoCom.setEnabled(true);
                sRonCom.setEnabled(true);
                sTieMinCom.setEnabled(true);
                sTieSegCom.setEnabled(true);
                btnInsCom.setEnabled(true);

            }
        }
    }//GEN-LAST:event_btnMarcarDosComActionPerformed

    private void btnInsComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsComActionPerformed
        // TODO add your handling code here:
        boolean flag_rondas = false;
        int numrondas = Integer.parseInt(sRonCom.getValue().toString());
        if (numrondas < 1 || numrondas > 5) {
            flag_rondas = true;
        } else {
            flag_rondas = false;
        }

        boolean flag_minutos = false;
        int numminutos = Integer.parseInt(sTieMinCom.getValue().toString());
        if (numrondas == 1) {
            if (numminutos < 0 || numminutos > 4) {
                flag_minutos = true;
            } else {
                flag_minutos = false;
            }
        }
        if (numrondas == 2) {
            if (numminutos < 5 || numminutos > 9) {
                flag_minutos = true;
            } else {
                flag_minutos = false;
            }
        }
        if (numrondas == 3) {
            if (numminutos < 10 || numminutos > 14) {
                flag_minutos = true;
            } else {
                flag_minutos = false;
            }
        }
        if (numrondas == 4) {
            if (numminutos < 15 || numminutos > 19) {
                flag_minutos = true;
            } else {
                flag_minutos = false;
            }
        }
        if (numrondas == 5) {
            if (numminutos < 20 || numminutos > 24) {
                flag_minutos = true;
            } else {
                flag_minutos = false;
            }
        }

        boolean flag_segundos = false;
        int numsegundos = Integer.parseInt(sTieSegCom.getValue().toString());
        if (numsegundos < 0 || numsegundos > 59) {
            flag_segundos = true;
        } else {
            flag_segundos = false;
        }

        if (cbMetodoCom.getSelectedIndex() == 0 || flag_rondas == true || flag_minutos == true || flag_segundos == true) {
            if (cbMetodoCom.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Error en 'MÉTODO DE FINALIZACIÓN': Seleccione un método");
            }
            if (flag_rondas == true) {
                JOptionPane.showMessageDialog(null, "Error en 'Nº DE RONDAS': Marque un número de rondas válido, de 1 a 5");
            }
            if (flag_minutos == true) {
                JOptionPane.showMessageDialog(null, "Error en 'TIEMPO DE COMBATE - MINUTOS': Marque unos minutos válidos según "
                        + "el número de rondas elegido\n1 Ronda, de 0 a 4\n2 Rondas, de 5 a 9\n3 Rondas, de 10 a 14\n4 Rondas, de 15 a 19\n5 Rondas, de 20 a 24");
            }
            if (flag_segundos == true) {
                JOptionPane.showMessageDialog(null, "Error en 'TIEMPO DE COMBATE - SEGUNDOS': Marque unos segundos válidos, de 0 a 59");
            }
        } else {
            //YA SE PUEDE INSERTAR

            //CON LAS SIGUIENTE LÍNEAS OBTENGO LA ID DE EVENTO
            String str_evento = jlEveCom.getSelectedValue();
            int pos = 0;
            for (int i = 0; i < str_evento.length(); i++) {
                if (str_evento.charAt(i) == ' ') {
                    pos = i;
                    break;
                }
            }
            int id_evento = Integer.parseInt(str_evento.substring(0, pos));

            String sexo = "";
            if (rbMasCom.isSelected()) {
                sexo = "MASCULINO";
            } else if (rbFemCom.isSelected()) {
                sexo = "FEMENINO";
            }

            int id_arbitro = Integer.parseInt(jlArbCom.getSelectedValue().replaceAll("[^\\.0123456789]", ""));
            int id_lucrojo = Integer.parseInt(jlLucRojoCom.getSelectedValue().replaceAll("[^\\.0123456789]", ""));
            int id_lucazul = Integer.parseInt(jlLucAzulCom.getSelectedValue().replaceAll("[^\\.0123456789]", ""));
            int id_lucvenc = Integer.parseInt(jlLucVenCom.getSelectedValue().replaceAll("[^\\.0123456789]", ""));

            int id_lucderr = 0;
            if (jlLucVenCom.isSelectedIndex(0)) {
                jlLucVenCom.setSelectedIndex(1);
                id_lucderr = Integer.parseInt(jlLucVenCom.getSelectedValue().replaceAll("[^\\.0123456789]", ""));
                jlLucVenCom.setSelectedIndex(0); //Devuelvo el valor marcado a nivel visual
            } else if (jlLucVenCom.isSelectedIndex(1)) {
                jlLucVenCom.setSelectedIndex(0);
                id_lucderr = Integer.parseInt(jlLucVenCom.getSelectedValue().replaceAll("[^\\.0123456789]", ""));
                jlLucVenCom.setSelectedIndex(1); //Devuelvo el valor marcado a nivel visual
            }

            Time tiempo_com = new Time(0, Integer.parseInt(sTieMinCom.getValue().toString()), Integer.parseInt(sTieSegCom.getValue().toString()));

            try {
                String url = "jdbc:mysql://localhost:3306/mymma";
                String userName = "root";
                String password = "";
                Class.forName("com.mysql.cj.jdbc.Driver");
                con = DriverManager.getConnection(url, userName, password);

                int id_cinturon = 0;
                st = con.createStatement();
                String sql = "SELECT * FROM cinturon "
                        + "WHERE sexoCin='" + sexo + "' AND categoriaCin='" + cbCatCom.getSelectedItem().toString() + "'";
                rs = st.executeQuery(sql);
                while (rs.next() == true) {
                    id_cinturon = rs.getInt("idCin");
                }
                st.close();

                if (jlCinCom.getSelectedIndex() != 0) {
                    id_cinturon = 0; //SI NO ES UN COMBATE TITULAR, LA ID VALDRA 0 POR TANTO EN LA BBDD ESTE CAMPO PUEDE SER NULL
                }
                //

                sql = "INSERT INTO combate (ideventoCom, sexoCom, categoriaCom, idarbitroCom, "
                        + "idluchadorrojoCom, idluchadorazulCom, metodoCom, numeroderondasCom, tiempoCom, "
                        + "idLuchadorVencedorCom, idLuchadorDerrotadoCom, idcinturonCom) "
                        + "VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
                pstmt = con.prepareStatement(sql);

                pstmt.setInt(1, id_evento);
                pstmt.setString(2, sexo);
                pstmt.setString(3, cbCatCom.getSelectedItem().toString());
                pstmt.setInt(4, id_arbitro);
                pstmt.setInt(5, id_lucrojo);
                pstmt.setInt(6, id_lucazul);
                pstmt.setString(7, cbMetodoCom.getSelectedItem().toString());
                pstmt.setInt(8, Integer.parseInt(sRonCom.getValue().toString()));
                pstmt.setTime(9, tiempo_com);
                pstmt.setInt(10, id_lucvenc);
                pstmt.setInt(11, id_lucderr);
                if (id_cinturon != 0) {
                    pstmt.setInt(12, id_cinturon);
                } else if (id_cinturon == 0) {
                    pstmt.setNull(12, java.sql.Types.INTEGER);
                }

                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(null, "COMBATE INSERTADO CORRECTAMENTE");
                pstmt.close();

                //ACTUALIZACIÓN DE RÉCORDS Y DE CAMPEÓN (EN EL CASO)
                //ACTUALIZACIÓN DE RÉCORD DEL LUCHADOR VENCEDOR
                st = con.createStatement();
                sql = "UPDATE luchador SET numerodecombatesLuc=numerodecombatesLuc+1, "
                        + "numerodevictoriasLuc=numerodevictoriasLuc+1 "
                        + "WHERE idLuc=" + id_lucvenc;
                st.executeUpdate(sql);
                st.close();
                //ACTUALIZACIÓN DE RÉCORD DEL LUCHADOR DERROTADO
                st = con.createStatement();
                sql = "UPDATE luchador SET numerodecombatesLuc=numerodecombatesLuc+1, "
                        + "numerodederrotasLuc=numerodederrotasLuc+1 "
                        + "WHERE idLuc=" + id_lucderr;
                st.executeUpdate(sql);
                st.close();
                //
                //ACTUALIZACIÓN DE CAMPEÓN (EN EL CASO)
                if (id_cinturon != 0) {
                    st = con.createStatement();
                    sql = "UPDATE cinturon SET idluchadorcampeonCin=" + id_lucvenc
                            + " WHERE idCin=" + id_cinturon;
                    st.executeUpdate(sql);
                    st.close();
                }
                //
                con.close();
                btnInsCom.setEnabled(false);
                cbMetodoCom.setEnabled(false);
                sRonCom.setEnabled(false);
                sTieMinCom.setEnabled(false);
                sTieSegCom.setEnabled(false);

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en conexión: SQLException " + ex);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Error en conexión: ClassNotFoundException");
            }

        }
    }//GEN-LAST:event_btnInsComActionPerformed

    private void cbMetodoComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMetodoComActionPerformed
        // TODO add your handling code here:
        //SI SELECCIONAMOS QUE EL METODO DE FINALIZACION HA SIDO POR PUNTOS ENTONCES EL Nº DE RONDAS Y EL TIEMPO DE COMBATE ESTARAN YA RESUELTAS
        if (cbMetodoCom.getSelectedIndex() == 3) {
            if (jlCinCom.getSelectedIndex() != 0) {
                sRonCom.setValue(3);
                sRonCom.setEnabled(false);
                sTieMinCom.setValue(14);
                sTieMinCom.setEnabled(false);
                sTieSegCom.setValue(59);
                sTieSegCom.setEnabled(false);
            } else if (jlCinCom.getSelectedIndex() == 0) {
                sRonCom.setValue(5);
                sRonCom.setEnabled(false);
                sTieMinCom.setValue(24);
                sTieMinCom.setEnabled(false);
                sTieSegCom.setValue(59);
                sTieSegCom.setEnabled(false);
            }
        } else if (cbMetodoCom.getSelectedIndex() != 3) {
            sRonCom.setValue(0);
            sRonCom.setEnabled(true);
            sTieMinCom.setValue(0);
            sTieMinCom.setEnabled(true);
            sTieSegCom.setValue(0);
            sTieSegCom.setEnabled(true);
        }

    }//GEN-LAST:event_cbMetodoComActionPerformed

    private void btnLimpiarComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarComActionPerformed
        // TODO add your handling code here:
        rbMasCom.setEnabled(true);
        rbFemCom.setEnabled(true);
        cbCatCom.setEnabled(true);
        rbMasCom.requestFocus();
        rbMasCom.setSelected(true);
        cbCatCom.setSelectedIndex(0);
        cbCatCom.removeAllItems();
        cbCatCom.addItem("<SELECCIONAR>");
        cbCatCom.addItem("PESO MOSCA");
        cbCatCom.addItem("PESO GALLO");
        cbCatCom.addItem("PESO PLUMA");
        cbCatCom.addItem("PESO LIGERO");
        cbCatCom.addItem("PESO WELTER");
        cbCatCom.addItem("PESO MEDIO");
        cbCatCom.addItem("PESO SEMICOMPLETO");
        cbCatCom.addItem("PESO PESADO");
        btnBuscarCom.setEnabled(true);
        jlLucRojoCom.setEnabled(true);
        jlArbCom.setEnabled(true);
        jlLucAzulCom.setEnabled(true);
        jlCinCom.setEnabled(true);
        jlEveCom.setEnabled(true);
        jlLucVenCom.setEnabled(true);
        cbMetodoCom.setSelectedIndex(0);
        sRonCom.setValue(0);
        sTieMinCom.setValue(0);
        sTieSegCom.setValue(0);
        sRonCom.setEnabled(false);
        sTieMinCom.setEnabled(false);
        sTieSegCom.setEnabled(false);
        modelo1.removeAllElements();
        modelo2.removeAllElements();
        modelo3.removeAllElements();
        modelo4.removeAllElements();
        modelo5.removeAllElements();
        modelo6.removeAllElements();
        btnMarcarCom.setEnabled(false);
        btnMarcarDosCom.setEnabled(false);
        btnInsCom.setEnabled(false);
        cbMetodoCom.setEnabled(false);
    }//GEN-LAST:event_btnLimpiarComActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        // TODO add your handling code here:
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmGuia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmGuia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmGuia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmGuia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmGuia().setVisible(true);
                dispose();
            }
        });
    }//GEN-LAST:event_btnAtrasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmInsercion2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmInsercion2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmInsercion2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmInsercion2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmInsercion2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnBuscarCom;
    private javax.swing.JButton btnInsCom;
    private javax.swing.JButton btnInsertarEve;
    private javax.swing.JButton btnLimpiarCom;
    private javax.swing.JButton btnLimpiarEve;
    private javax.swing.JButton btnMarcarCom;
    private javax.swing.JButton btnMarcarDosCom;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbCatCom;
    private javax.swing.JComboBox<String> cbMetodoCom;
    private javax.swing.JComboBox<String> cbPromocionEve;
    private com.toedter.calendar.JDateChooser dcFechaEve;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> jlArbCom;
    private javax.swing.JList<String> jlCinCom;
    private javax.swing.JList<String> jlEveCom;
    private javax.swing.JList<String> jlLucAzulCom;
    private javax.swing.JList<String> jlLucRojoCom;
    private javax.swing.JList<String> jlLucVenCom;
    private javax.swing.JLabel jlPromotores;
    private javax.swing.JRadioButton rbFemCom;
    private javax.swing.JRadioButton rbMasCom;
    private javax.swing.JSpinner sAsistenciaEve;
    private javax.swing.JSpinner sRecaudacionEve;
    private javax.swing.JSpinner sRonCom;
    private javax.swing.JSpinner sTieMinCom;
    private javax.swing.JSpinner sTieSegCom;
    private javax.swing.JTextField tfCiudadEve;
    private javax.swing.JTextField tfNombreEve;
    private javax.swing.JTextField tfSedeEve;
    // End of variables declaration//GEN-END:variables
}
